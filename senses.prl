#!/usr/bin/perl
#
# Convert interest.acl94.txt into interest_x.arff

use strict;
use warnings;


# Choose a nGram value (0 to infinity):
my $ngram;   # The nGram value

# Create some files with differents ngrams windows :
$ngram = 1;
make_arff();

$ngram = 2;
make_arff();

$ngram = 3;
make_arff();

$ngram = 10000;
make_arff();


# Create the .arff file
sub make_arff 
{
    my $count;       # gram counter
    my $linenum = 0; # phrase counting
    my @interest;    # array of interest meanings
    my @word_tag;    # word/tag pair
    my @pairs;       # all word/tag pairs from a phrase
    my $filename = "interest.acl94.txt"; # file that contains all phrases in syntactic style
    my $lines;       # all phrases in the file
    my $tofile;      # the .arff file for writting to

    open($lines, '<:encoding(UTF-8)', $filename)
        or die "Could not open file '$filename' $!";

    # Choosing the file name
    if ($ngram == 10000) 
    {
        $filename = "interest_whole-phrase.arff";
    }
    else 
    {
        $filename = "interest_$ngram-gram.arff";
    }
    
    open($tofile, '>', $filename);

    # Attributs
    my $prevwords;
    my $nextwords;
    my $prevtags;
    my $nexttags;
    my @senses = ("'readiness to give attention'",
                  "'quality of causing attention to be given to'",
                  "'activity, etc. that one gives attention to'",
                  "'advantage, advancement or favor'",
                  "'a share in a company or business'",
                  "'money paid for the use of money'");

    # The .arff file header
    my $header = "% File: $filename\n% by Dorin Diaconu, Georgiy Gegiya\n\n";
    $header .= "\@RELATION interest\n\n";
    $header .= "\@ATTRIBUTE prevwords string\n";
    $header .= "\@ATTRIBUTE nextwords string\n";
    $header .= "\@ATTRIBUTE prevtags string\n";
    $header .= "\@ATTRIBUTE nexttags string\n";
    $header .= "\@ATTRIBUTE class_senses {$senses[0], $senses[1], $senses[2], $senses[3], $senses[4], $senses[5]}\n\n";
    $header .= "\@DATA\n";
    print $tofile "$header \n";

    # Create an array of stopwords
    my $stopwords = stopword();


    # Loop thru every phrase
    foreach my $line (<$lines>) 
    {
        # Ignore $$ separator lines
        next if ($line =~ /^\s*\$\$\s*$/);

        # Convert plural to singular for interest(s), lose underscore in sense labels
        # since WEKA doesn't like punctuation in its data items
        # e.g. interests_6 becomes interest6
        # Get rid of brackets, ====
        $line =~ tr/=[]//d; # tr - translate, d - delete
        $line =~ s/interests/interest/g; # s - substitution
        $line =~ s/interest_/interest/g; # g - replaces all occurrences of the found expression with the replacement text.
        $line =~ s/(\.\/\.)//g; # remove dots
        $line =~ s/(\,\/\,)//g; # remove commas
        $line =~ s/''\/''//g; 
        $line =~ s/``\/``//g;
        $line =~ s/\{\/\(//g;
        $line =~ s/\}\/\)//g;
        $line =~ s/\(\/\(//g;
        $line =~ s/\)\/\)//g;
        $line =~ s/ \/\)//g;
        $line =~ s/[\W\D]\/://g;

        # Clean-up for empty spaces
        $line =~ s/^\s+//; # replace empty space at the beginning of the line
        $line =~ s/\s+/ /g; # replace 2 or more empty spaces by one

        @pairs = split / /, $line; # split line of string text into array of pairs

        # Make some replacements
        for (my $i = 0; $i < @pairs; ++$i)
        {
            # Replace all punctuation within values with X, since WEKA doesn't like punctuation
            # (e.g. u.s. becomes uXsX)
            # Except %, which turns into PERCENT (worth keeping for this problem!)
            $pairs[$i] =~ s/'/X/g;                # replace ' by X
            $pairs[$i] =~ s/&/AND/g;              # replace & by AND
            $pairs[$i] =~ s/--/-/g;               # -- by -
            $pairs[$i] =~ s/PP\$/PP/g;            # PP$ by PP
            $pairs[$i] =~ s/WP\$/WP/g;            # WP$ by WP
            $pairs[$i] =~ s/\$\/\$/\$\/NN/g;      # $/$ by $/NN
            $pairs[$i] =~ s/\%\/\%/\%\/NN/g;      # %/% by %/NN
            $pairs[$i] =~ s/\#\/\#/\#\/NN/g;      # #/# by #/NN
            $pairs[$i] =~ s/([\d\w])(\.)/$1X/g;   # punctuation in words and digits by X

            # (For optional experiment with coarser sense distinctions)
            # Collapse interest1...interest4   to interestA (interest=caring about)
            # Collapse interest5 and interest6 to interestB (interest=financial)

            #...
        }

        $line = join(" ", @pairs); # recombine pairs to line string

        my @prevwordsArray;
        my @prevtagsArray;
        my @nextwordsArray;
        my @nexttagsArray;

        # Go through this sentence
        for (my $i = 0; $i < @pairs; ++$i)
        {
            if ($pairs[$i] =~ /^interest[0-9AB]/) # pivot
            {
                # Reset counter
                $count = 0;

                # Collecting prevwords & prevtags:
                for (my $j = $i-1; $j > -1; $j--)
                {
                    @word_tag = split /\//, $pairs[$j];

                    # Avoid stopwords
                    if ($stopwords =~ /\Q$word_tag[0]/) { # \Q to autoescape problematic character
                        next; # passing to the next iteration
                    }

                    # Respecting the nGram
                    if ($count == $ngram) { last; } # breaking loop
                    $count++;

                    # Checking for bad word/tag structure
                    if (!$word_tag[0]) {$word_tag[0] = "?";}
                    if (!$word_tag[1]) {$word_tag[1] = "?";}

                    push @prevwordsArray, $word_tag[0]; # append word to the @prevwords array
                    push @prevtagsArray,  $word_tag[1]; # append tag
                }

                # Reset counter
                $count = 0;

                # Collecting nextwords & nexttags:
                for (my $j = $i+1; $j < @pairs; $j++)
                {
                    @word_tag = split /\//, $pairs[$j];

                    # Avoid stopwords
                    if ($stopwords =~ /\Q$word_tag[0]/) { # \Q to autoescape problematic character
                        next; # passing to the next iteration
                    }

                    # Respecting the nGram
                    if ($count == $ngram) { last; } # breaking loop
                    $count++;
                    
                    # Checking for bad word/tag structure
                    if (!$word_tag[0]) {$word_tag[0] = "?";}
                    if (!$word_tag[1]) {$word_tag[1] = "?";}

                    push @nextwordsArray, $word_tag[0]; # append word to the @nextwords array
                    push @nexttagsArray,  $word_tag[1]; # append tag
                }

                # Recovery interest sense from @pairs array
                @interest = split /\//, $pairs[$i];
                @interest = split //, $interest[0];
            }
        }

        $prevwords = join(" ", reverse @prevwordsArray);
        $prevtags  = join(" ", reverse @prevtagsArray);
        $nextwords = join(" ", @nextwordsArray);
        $nexttags  = join(" ", @nexttagsArray);

        # Write one line of values into the .arff file
        print $tofile "'$prevwords', '$nextwords', '$prevtags', '$nexttags', $senses[$interest[-1]-1]\n";

        ++$linenum;
    }

    close $lines;
    close $tofile;

}


# Return an string with stopwords
sub stopword 
{
    my $stopwords;
    my $filename = "stoplist-english.txt";

    open(my $lines, '<:encoding(UTF-8)', $filename)
        or die "Could not open file '$filename' $!";

    $stopwords = join("", <$lines>);

    close $lines;

    return $stopwords;
}